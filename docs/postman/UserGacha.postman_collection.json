{
	"info": {
		"_postman_id": "2b7ae292-58d5-41a8-bb14-4635b3ca1c75",
		"name": "UserGacha",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15910404"
	},
	"item": [
		{
			"name": "get full system gacha collection",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 for valid request\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"\r",
							"    // Check that each item in the array has the required properties\r",
							"    jsonData.forEach(item => {\r",
							"        pm.expect(item).to.have.property(\"description\");\r",
							"        pm.expect(item).to.have.property(\"id\");\r",
							"        pm.expect(item).to.have.property(\"image\");\r",
							"        pm.expect(item).to.have.property(\"name\");\r",
							"        pm.expect(item).to.have.property(\"rarityPercent\");\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Expect 404 for invalid endpoint\", function () {\r",
							"    pm.sendRequest(\"localhost:5000/api/admin/gachas\", function (err, res) {\r",
							"        pm.expect(res).to.have.status(404);\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:5000/api/player/gacha/system-collection",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"player",
						"gacha",
						"system-collection"
					]
				}
			},
			"response": [
				{
					"name": "get full system gacha collection",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:5000/api/player/gacha/system-collection",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"player",
								"gacha",
								"system-collection"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Werkzeug/3.1.3 Python/3.12.7"
						},
						{
							"key": "Date",
							"value": "Tue, 19 Nov 2024 12:08:01 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "1495"
						},
						{
							"key": "Connection",
							"value": "close"
						}
					],
					"cookie": [],
					"body": "[\n    {\n        \"description\": \"Updated item.\",\n        \"id\": 1,\n        \"image\": \"https://super.abril.com.br/wp-content/uploads/2019/12/reproducao_pokemon_episodio_pokemon_centenas_criancas_hospital.jpg\",\n        \"name\": \"New Test Item\",\n        \"rarityPercent\": 0.4\n    },\n    {\n        \"description\": \"Test item.\",\n        \"id\": 2,\n        \"image\": \"https://super.abril.com.br/wp-content/uploads/2019/12/reproducao_pokemon_episodio_pokemon_centenas_criancas_hospital.jpg\",\n        \"name\": \"New Test Item\",\n        \"rarityPercent\": 0.9\n    },\n    {\n        \"description\": \"Test item4.\",\n        \"id\": 4,\n        \"image\": \"https://super.abril.com.br/wp-content/uploads/2019/12/reproducao_pokemon_episodio_pokemon_centenas_criancas_hospital.jpg\",\n        \"name\": \"New Test Item\",\n        \"rarityPercent\": 0.5\n    },\n    {\n        \"description\": \"Test item4.\",\n        \"id\": 1002,\n        \"image\": \"https://super.abril.com.br/wp-content/uploads/2019/12/reproducao_pokemon_episodio_pokemon_centenas_criancas_hospital.jpg\",\n        \"name\": \"New Test Item\",\n        \"rarityPercent\": 0.4\n    },\n    {\n        \"description\": \"Test item8.\",\n        \"id\": 1003,\n        \"image\": \"https://super.abril.com.br/wp-content/uploads/2019/12/reproducao_pokemon_episodio_pokemon_centenas_criancas_hospital.jpg\",\n        \"name\": \"New Test Item\",\n        \"rarityPercent\": 0.8\n    },\n    {\n        \"description\": \"Test item8.\",\n        \"id\": 1004,\n        \"image\": \"https://super.abril.com.br/wp-content/uploads/2019/12/reproducao_pokemon_episodio_pokemon_centenas_criancas_hospital.jpg\",\n        \"name\": \"New Test Item\",\n        \"rarityPercent\": 0.8\n    }\n]"
				}
			]
		},
		{
			"name": "get system gacha item details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test if the response status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test if the response contains the expected fields\r",
							"pm.test(\"Response has the expected structure\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData).to.have.property('name');\r",
							"    pm.expect(jsonData).to.have.property('description');\r",
							"    pm.expect(jsonData).to.have.property('image');\r",
							"    pm.expect(jsonData).to.have.property('rarityPercent');\r",
							"});\r",
							"\r",
							"// Test if the 'id' is 1 (based on the URL passed)\r",
							"pm.test(\"ID should be 1\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(1);\r",
							"});\r",
							"\r",
							"// Test if the 'rarityPercent' field is a number between 0 and 1\r",
							"pm.test(\"Rarity percent should be between 0 and 1\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.rarityPercent).to.be.a('number').that.is.greaterThanOrEqual(0).and.lessThanOrEqual(1);\r",
							"});\r",
							"\r",
							"// TEST CASE: Invalid ID (non-existent ID)\r",
							"pm.test(\"Expect 404 for non-existent gacha item\", function () {\r",
							"    // Assuming 999999 does not exist\r",
							"    pm.sendRequest(\"localhost:5000/api/admin/gacha/999999\", function (err, res) {\r",
							"        pm.expect(res).to.have.status(404);\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:5000/api/player/gacha/system-collection/1",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"player",
						"gacha",
						"system-collection",
						"1"
					]
				}
			},
			"response": [
				{
					"name": "get system gacha item details",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:5000/api/player/gacha/system-collection/1",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"player",
								"gacha",
								"system-collection",
								"1"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Werkzeug/3.1.3 Python/3.12.7"
						},
						{
							"key": "Date",
							"value": "Tue, 19 Nov 2024 12:07:53 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "234"
						},
						{
							"key": "Connection",
							"value": "close"
						}
					],
					"cookie": [],
					"body": "{\n    \"description\": \"Updated item.\",\n    \"id\": 1,\n    \"image\": \"https://super.abril.com.br/wp-content/uploads/2019/12/reproducao_pokemon_episodio_pokemon_centenas_criancas_hospital.jpg\",\n    \"name\": \"New Test Item\",\n    \"rarityPercent\": 0.4\n}"
				}
			]
		},
		{
			"name": "get player collection",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 for valid request\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"\r",
							"    // Check that each item in the array has the required properties\r",
							"    jsonData.forEach(item => {\r",
							"        pm.expect(item).to.have.property(\"gachaId\");\r",
							"        pm.expect(item).to.have.property(\"id\");\r",
							"        pm.expect(item).to.have.property(\"source\");\r",
							"        pm.expect(item).to.have.property(\"timestamp\");\r",
							"        pm.expect(item).to.have.property(\"userId\");\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Expect 404 for invalid endpoint\", function () {\r",
							"    pm.sendRequest(\"localhost:5000/api/player/gacha/player-collections/4\", function (err, res) {\r",
							"        pm.expect(res).to.have.status(404);\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:5000/api/player/gacha/player-collection/4",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"player",
						"gacha",
						"player-collection",
						"4"
					]
				}
			},
			"response": [
				{
					"name": "get player collection",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:5000/api/player/gacha/player-collection/4",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"player",
								"gacha",
								"player-collection",
								"4"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Werkzeug/3.1.3 Python/3.12.7"
						},
						{
							"key": "Date",
							"value": "Tue, 19 Nov 2024 12:08:19 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "131"
						},
						{
							"key": "Connection",
							"value": "close"
						}
					],
					"cookie": [],
					"body": "[\n    {\n        \"gachaId\": 1,\n        \"id\": 6,\n        \"source\": \"ROLL\",\n        \"timestamp\": \"Tue, 19 Nov 2024 09:37:00 GMT\",\n        \"userId\": 4\n    }\n]"
				}
			]
		},
		{
			"name": "get player collection item",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test if the response status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test if the response contains the expected fields\r",
							"pm.test(\"Response has the expected structure\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData).to.have.property('gachaId');\r",
							"    pm.expect(jsonData).to.have.property('source');\r",
							"    pm.expect(jsonData).to.have.property('timestamp');\r",
							"    pm.expect(jsonData).to.have.property('userId');\r",
							"});\r",
							"\r",
							"// Test if the 'id' is 4 (based on the URL passed)\r",
							"pm.test(\"ID should be 4\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(4);\r",
							"});\r",
							"\r",
							"// Test if the 'source' field is one of the valid values (\"ROLL\", \"AUCTION\", \"UNKNOWN\")\r",
							"pm.test(\"Source should be one of 'ROLL', 'AUCTION', or 'UNKNOWN'\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var validSources = ['ROLL', 'AUCTION', 'UNKNOWN'];\r",
							"    pm.expect(validSources).to.include(jsonData.source);\r",
							"});\r",
							"\r",
							"// TEST CASE: Invalid ID (non-existent ID)\r",
							"pm.test(\"Expect 404 for non-existent gacha collection item\", function () {\r",
							"    // Assuming 9999 does not exist\r",
							"    pm.sendRequest(\"localhost:5000/api/player/gacha/player-collection/item/9999\", function (err, res) {\r",
							"        pm.expect(res).to.have.status(404);\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:5000/api/player/gacha/player-collection/item/4",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"player",
						"gacha",
						"player-collection",
						"item",
						"4"
					]
				}
			},
			"response": [
				{
					"name": "get player collection item",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:5000/api/player/gacha/player-collection/item/4",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"player",
								"gacha",
								"player-collection",
								"item",
								"4"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Werkzeug/3.1.3 Python/3.12.7"
						},
						{
							"key": "Date",
							"value": "Tue, 19 Nov 2024 12:10:16 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "113"
						},
						{
							"key": "Connection",
							"value": "close"
						}
					],
					"cookie": [],
					"body": "{\n    \"gachaId\": 1,\n    \"id\": 4,\n    \"source\": \"ROLL\",\n    \"timestamp\": \"Mon, 18 Nov 2024 21:03:01 GMT\",\n    \"userId\": 1\n}"
				}
			]
		},
		{
			"name": "roll a new gacha using in-game currency.",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// tEST WITH EXISTING USER ID\r",
							"const requestData = {\r",
							"    \"userId\": 4\r",
							"};\r",
							"\r",
							"// Asynchronous request with assertions in the callback\r",
							"pm.sendRequest({\r",
							"    url: \"http://localhost:5000/api/player/gacha/roll\",\r",
							"    method: \"POST\",\r",
							"    header: {\r",
							"        \"Content-Type\": \"application/json\"\r",
							"    },\r",
							"    body: {\r",
							"        mode: \"raw\",\r",
							"        raw: JSON.stringify(requestData)\r",
							"    }\r",
							"}, function (err, res) {\r",
							"    pm.test(\"Gacha Roll - Status 200\", function () {\r",
							"        pm.expect(res).to.have.status(200); // Expect 200 OK\r",
							"\r",
							"        const jsonData = res.json();\r",
							"        pm.expect(jsonData).to.have.property(\"collectionId\"); // Check if collectionId is in the response\r",
							"        pm.expect(jsonData.collectionId).to.be.a(\"number\"); // Ensure collectionId is a number\r",
							"    });\r",
							"});\r",
							"\r",
							"// INVALID REQUEST\r",
							"\r",
							"const invalidRequestData = {\r",
							"    \"userId\": 999\r",
							"};\r",
							"\r",
							"// Asynchronous request with assertions in the callback\r",
							"pm.sendRequest({\r",
							"    url: \"http://localhost:5000/api/player/gacha/roll\",\r",
							"    method: \"POST\",\r",
							"    header: {\r",
							"        \"Content-Type\": \"application/json\"\r",
							"    },\r",
							"    body: {\r",
							"        mode: \"raw\",\r",
							"        raw: JSON.stringify(invalidRequestData)\r",
							"    }\r",
							"}, function (err, res) {\r",
							"    pm.test(\"Gacha Roll - Non-Existent User ID\", function () {\r",
							"        pm.expect(res).to.have.status(404); // Expect 404 Not Found\r",
							"\r",
							"        const jsonData = res.json();\r",
							"        pm.expect(jsonData).to.have.property(\"error\", \"Resource not found\"); // Check for specific error message\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userId\": 4\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:5000/api/player/gacha/roll",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"player",
						"gacha",
						"roll"
					]
				}
			},
			"response": [
				{
					"name": "roll a new gacha using in-game currency.",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": 4\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:5000/api/player/gacha/roll",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"player",
								"gacha",
								"roll"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Werkzeug/3.1.3 Python/3.12.7"
						},
						{
							"key": "Date",
							"value": "Tue, 19 Nov 2024 12:16:17 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Connection",
							"value": "close"
						}
					],
					"cookie": [],
					"body": "{\n    \"collectionId\": 8\n}"
				}
			]
		}
	]
}