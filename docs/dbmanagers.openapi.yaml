openapi: 3.0.3
info:
  title: "ASE Project API"
  version: "1.0.0"
  description: "API documentation for the database managers"
servers:
  - url: "http://localhost:5000"
paths:
  /auctionbid:
    get:
      summary: "Get all auction bids"
      tags: ["AuctionDBManager"]
      responses:
        "200":
          description: "List of all auction bids"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AuctionBid"
        "404":
          description: "Auction bids not found"
    post:
      summary: "Create a new auction bid"
      tags: ["AuctionDBManager"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAuctionBidRequest"
      responses:
        "200":
          description: "Auction bid created successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  bidId:
                    type: integer
                    description: "ID of the newly created auction bid"
        "400":
          description: "Invalid auction bid data"
  /auctionbid/{bidId}:
    get:
      summary: "Get a single auction bid by ID"
      tags: ["AuctionDBManager"]
      parameters:
        - in: path
          name: bidId
          required: true
          schema:
            type: integer
          description: "ID of the auction bid"
      responses:
        "200":
          description: "Auction bid retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuctionBid"
        "404":
          description: "Auction bid not found"
    put:
      summary: "Update an auction bid by ID"
      tags: ["AuctionDBManager"]
      parameters:
        - in: path
          name: bidId
          required: true
          schema:
            type: integer
          description: "ID of the auction bid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAuctionBidRequest"
      responses:
        "200":
          description: "Auction bid updated successfully"
        "400":
          description: "Invalid auction bid data"
        "404":
          description: "Auction bid not found"
    delete:
      summary: "Delete an auction bid by ID"
      tags: ["AuctionDBManager"]
      parameters:
        - in: path
          name: bidId
          required: true
          schema:
            type: integer
          description: "ID of the auction bid"
      responses:
        "200":
          description: "Auction bid deleted successfully"
        "404":
          description: "Auction bid not found"
  /auctionbid/user/{userId}:
    get:
      summary: "Get all auction bids for a specific user"
      tags: ["AuctionDBManager"]
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
          description: "ID of the user"
      responses:
        "200":
          description: "List of auction bids for the user"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AuctionBid"
        "404":
          description: "Auction bids not found"
  /auction/{status}:
    get:
      summary: "Get all auctions with a specific status"
      tags: ["AuctionDBManager"]
      parameters:
        - in: path
          name: status
          required: true
          schema:
            type: string
          description: "Status of the auctions to retrieve"
      responses:
        "200":
          description: "List of auctions with the specified status"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Auction"
        "404":
          description: "Auctions not found"
  /auction/{auctionId}:
    get:
      summary: "Get a single auction by ID"
      tags: ["AuctionDBManager"]
      parameters:
        - in: path
          name: auctionId
          required: true
          schema:
            type: integer
          description: "ID of the auction"
      responses:
        "200":
          description: "Auction retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Auction"
        "404":
          description: "Auction not found"
    put:
      summary: "Update an auction by ID"
      tags: ["AuctionDBManager"]
      parameters:
        - in: path
          name: auctionId
          required: true
          schema:
            type: integer
          description: "ID of the auction to update"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAuctionRequest"
      responses:
        "200":
          description: "Auction updated successfully"
        "400":
          description: "Invalid auction data"
        "404":
          description: "Auction not found"
    delete:
      summary: "Delete an auction by ID"
      tags: ["AuctionDBManager"]
      parameters:
        - in: path
          name: auctionId
          required: true
          schema:
            type: integer
          description: "ID of the auction to delete"
      responses:
        "200":
          description: "Auction deleted successfully"
        "404":
          description: "Auction not found"
  /auction:
    post:
      summary: "Create a new auction"
      tags: ["AuctionDBManager"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAuctionRequest"
      responses:
        "200":
          description: "Auction created successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  auctionId:
                    type: integer
                    description: "ID of the newly created auction"
        "400":
          description: "Invalid auction data"
  /gachacollection:
    get:
      summary: "Get all gacha collections"
      tags: ["GachaDBManager"]
      responses:
        "200":
          description: "List of all gacha collections"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GachaCollection"
        "404":
          description: "Gacha collections not found"
    post:
      summary: "Create a new gacha collection"
      tags: ["GachaDBManager"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateGachaCollectionRequest"
      responses:
        "200":
          description: "Gacha collection created successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  collectionId:
                    type: integer
                    description: "ID of the newly created gacha collection"
        "400":
          description: "Invalid gacha collection data"
  /gachacollection/{userId}:
    get:
      summary: "Get all gacha collections for a user"
      tags: ["GachaDBManager"]
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
          description: "ID of the user"
      responses:
        "200":
          description: "List of gacha collections for the specified user"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GachaCollection"
        "404":
          description: "Gacha collections not found"
  /gachacollection/item/{collectionId}:
    get:
      summary: "Get a single gacha collection by ID"
      tags: ["GachaDBManager"]
      parameters:
        - in: path
          name: collectionId
          required: true
          schema:
            type: integer
          description: "ID of the gacha collection"
      responses:
        "200":
          description: "Gacha collection retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GachaCollection"
        "404":
          description: "Gacha collection not found"
  /gachacollection/{collectionId}:
    put:
      summary: "Update a gacha collection by ID"
      tags: ["GachaDBManager"]
      parameters:
        - in: path
          name: collectionId
          required: true
          schema:
            type: integer
          description: "ID of the gacha collection to update"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateGachaCollectionRequest"
      responses:
        "200":
          description: "Gacha collection updated successfully"
        "400":
          description: "Invalid gacha collection data"
        "404":
          description: "Gacha collection not found"
    delete:
      summary: "Delete a gacha collection by ID"
      tags: ["GachaDBManager"]
      parameters:
        - in: path
          name: collectionId
          required: true
          schema:
            type: integer
          description: "ID of the gacha collection to delete"
      responses:
        "200":
          description: "Gacha collection deleted successfully"
        "404":
          description: "Gacha collection not found"
  /gacha:
    get:
      summary: "Get all gachas"
      tags: ["GachaDBManager"]
      responses:
        "200":
          description: "List of all gachas"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Gacha"
        "404":
          description: "Gachas not found"
    post:
      summary: "Create a new gacha"
      tags: ["GachaDBManager"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateGachaRequest"
      responses:
        "200":
          description: "Gacha created successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  gachaId:
                    type: integer
                    description: "ID of the newly created gacha"
        "400":
          description: "Invalid gacha data"
  /gacha/{gachaId}:
    get:
      summary: "Get a single gacha by ID"
      tags: ["GachaDBManager"]
      parameters:
        - in: path
          name: gachaId
          required: true
          schema:
            type: integer
          description: "ID of the gacha"
      responses:
        "200":
          description: "Gacha retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Gacha"
        "404":
          description: "Gacha not found"
    put:
      summary: "Update a gacha by ID"
      tags: ["GachaDBManager"]
      parameters:
        - in: path
          name: gachaId
          required: true
          schema:
            type: integer
          description: "ID of the gacha to update"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateGachaRequest"
      responses:
        "200":
          description: "Gacha updated successfully"
        "400":
          description: "Invalid gacha data"
        "404":
          description: "Gacha not found"
    delete:
      summary: "Delete a gacha by ID"
      tags: ["GachaDBManager"]
      parameters:
        - in: path
          name: gachaId
          required: true
          schema:
            type: integer
          description: "ID of the gacha to delete"
      responses:
        "200":
          description: "Gacha deleted successfully"
        "404":
          description: "Gacha not found"
  /gacha/random:
    get:
      summary: "Get a random gacha"
      tags: ["GachaDBManager"]
      responses:
        "200":
          description: "A random gacha retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Gacha"
        "404":
          description: "No gachas found"
  /currencytransaction:
    get:
      summary: "Get all currency transactions"
      tags: ["PaymentsDBManager"]
      responses:
        "200":
          description: "List of all currency transactions"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CurrencyTransaction"
        "404":
          description: "Currency transactions not found"
    post:
      summary: "Create a new currency transaction"
      tags: ["PaymentsDBManager"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCurrencyTransactionRequest"
      responses:
        "200":
          description: "Currency transaction created successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactionId:
                    type: integer
                    description: "ID of the newly created transaction"
        "400":
          description: "Invalid currency transaction data"
  /currencytransaction/{transactionId}:
    delete:
      summary: "Delete a currency transaction by ID"
      tags: ["PaymentsDBManager"]
      parameters:
        - in: path
          name: transactionId
          required: true
          schema:
            type: integer
          description: "ID of the transaction to delete"
      responses:
        "200":
          description: "Currency transaction deleted successfully"
        "404":
          description: "Currency transaction not found"
  /currencytransaction/{userId}:
    get:
      summary: "Get currency transactions for a specific user"
      tags: ["PaymentsDBManager"]
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
          description: "ID of the user"
      responses:
        "200":
          description: "List of currency transactions for the user"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CurrencyTransaction"
        "404":
          description: "Currency transactions not found"
  /auctiontransaction:
    get:
      summary: "Get all auction transactions"
      tags: ["TransactionDBManager"]
      responses:
        "200":
          description: "List of all auction transactions"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AuctionTransaction"
        "404":
          description: "Auction transactions not found"
    post:
      summary: "Create a new auction transaction"
      tags: ["TransactionDBManager"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAuctionTransactionRequest"
      responses:
        "200":
          description: "Auction transaction created successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactionId:
                    type: integer
                    description: "ID of the newly created transaction"
        "400":
          description: "Invalid auction transaction data"
  /auctiontransaction/{transactionId}:
    get:
      summary: "Get a single auction transaction by ID"
      tags: ["TransactionDBManager"]
      parameters:
        - in: path
          name: transactionId
          required: true
          schema:
            type: integer
          description: "ID of the auction transaction"
      responses:
        "200":
          description: "Details of the auction transaction"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuctionTransaction"
        "404":
          description: "Auction transaction not found"
    put:
      summary: "Update an auction transaction by ID"
      tags: ["TransactionDBManager"]
      parameters:
        - in: path
          name: transactionId
          required: true
          schema:
            type: integer
          description: "ID of the auction transaction"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAuctionTransactionRequest"
      responses:
        "200":
          description: "Auction transaction updated successfully"
        "400":
          description: "Invalid auction transaction data"
    delete:
      summary: "Delete an auction transaction by ID"
      tags: ["TransactionDBManager"]
      parameters:
        - in: path
          name: transactionId
          required: true
          schema:
            type: integer
          description: "ID of the auction transaction"
      responses:
        "200":
          description: "Auction transaction deleted successfully"
        "404":
          description: "Auction transaction not found"
  /auctiontransaction/user/{userId}:
    get:
      summary: "Get auction transactions for a specific user"
      tags: ["TransactionDBManager"]
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
          description: "ID of the user"
      responses:
        "200":
          description: "List of auction transactions for the user"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AuctionTransaction"
        "404":
          description: "Auction transactions not found"
  /user:
    get:
      summary: "Get all users"
      tags: ["UserDBManager"]
      responses:
        "200":
          description: "List of all users"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "404":
          description: "Users not found"
    post:
      summary: "Create a new user"
      tags: ["UserDBManager"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
      responses:
        "200":
          description: "User created successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: integer
                    description: "ID of the newly created user"
        "400":
          description: "Invalid user data"
  /user/{userId}:
    get:
      summary: "Get a single user by ID"
      tags: ["UserDBManager"]
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
          description: "ID of the user"
      responses:
        "200":
          description: "Details of the user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: "User not found"
    put:
      summary: "Update a user by ID"
      tags: ["UserDBManager"]
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
          description: "ID of the user"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
      responses:
        "200":
          description: "User updated successfully"
        "400":
          description: "Invalid user data"
    patch:
      summary: "Patch a user by ID"
      tags: ["UserDBManager"]
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
          description: "ID of the user"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
      responses:
        "200":
          description: "User successfully updated"
        "400":
          description: "No data provided"
    delete:
      summary: "Delete a user by ID"
      tags: ["UserDBManager"]
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
          description: "ID of the user"
      responses:
        "200":
          description: "User deleted successfully"
        "404":
          description: "User not found"
  /user/auth/{accountId}:
    get:
      summary: "Get a user by authentication ID"
      tags: ["UserDBManager"]
      parameters:
        - in: path
          name: accountId
          required: true
          schema:
            type: integer
          description: "Authentication ID of the user"
      responses:
        "200":
          description: "User details"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: "User not found"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    GachaItem:
      type: object
      properties:
        id:
          type: integer
          description: "ID of the gacha item"
        name:
          type: string
          description: "Name of the gacha item"
        description:
          type: string
          description: "Description of the gacha item"
        image:
          type: string
          description: "URL to the gacha item's image"
        rarityPercent:
          type: number
          format: float
          description: "Rarity percentage of the gacha item"
    GachaItemInput:
      type: object
      properties:
        name:
          type: string
          description: "Name of the gacha item"
        description:
          type: string
          description: "Description of the gacha item"
        image:
          type: string
          description: "URL to the gacha item's image"
        rarityPercent:
          type: number
          format: float
          description: "Rarity percentage of the gacha item"
      required:
        - name
        - description
        - image
        - rarityPercent
    GachaCollectionItem:
      type: object
      properties:
        id:
          type: string
          description: "Name of the gacha item"
        gachaId:
          type: string
          description: "Description of the gacha item"
        userId:
          type: string
          description: "URL to the gacha item's image"
        source:
          type: number
          format: float
          description: "Rarity percentage of the gacha item"
        timestamp:
          type: string
          description: "Creation timestamp"

    CurrencyPurchase:
      type: object
      properties:
        amount:
          type: number
          format: float
          description: "Amount of currency to purchase"
      required:
        - amount
    CurrencyChange:
      type: object
      properties:
        amount:
          type: number
          format: float
          description: "Amount to add or subtract"
      required:
        - amount
    Transaction:
      type: object
      properties:
        id:
          type: integer
          description: "Transaction ID"
        userId:
          type: integer
          description: "User ID for the transaction"
        amount:
          type: number
          format: float
          description: "Transaction amount"
        timestamp:
          type: string
          format: date-time
          description: "Transaction timestamp"
    UserProfile:
      type: object
      properties:
        id:
          type: integer
          description: "Unique user ID"
        name:
          type: string
          description: "Name of the player"
        email:
          type: string
          description: "Email address"
        balance:
          type: number
          format: float
          description: "In-game currency balance"
        profilePicture:
          type: string
          description: "Profile picture URL"
        status:
          type: string
          description: "Account status"
    UpdateProfileRequest:
      type: object
      properties:
        profilePicture:
          type: string
          description: "New profile picture URL"
    BanRequest:
      type: object
      properties:
        status:
          type: string
          description: "New player status (e.g., 'banned')"
    AuctionBid:
      type: object
      properties:
        id:
          type: integer
          description: "Unique ID of the auction bid"
        userId:
          type: integer
          description: "ID of the user who placed the bid"
        auctionId:
          type: integer
          description: "ID of the auction"
        bidAmount:
          type: number
          format: float
          description: "Amount of the bid"
        timestamp:
          type: string
          format: date-time
          description: "Timestamp of when the bid was placed"
    CreateAuctionBidRequest:
      type: object
      properties:
        userId:
          type: integer
          description: "ID of the user placing the bid"
        auctionId:
          type: integer
          description: "ID of the auction"
        bidAmount:
          type: number
          format: float
          description: "Amount of the bid"
        timestamp:
          type: string
          format: date-time
          description: "Timestamp of when the bid is placed"
    UpdateAuctionBidRequest:
      type: object
      properties:
        userId:
          type: integer
          description: "ID of the user placing the bid"
        auctionId:
          type: integer
          description: "ID of the auction"
        bidAmount:
          type: number
          format: float
          description: "Updated amount of the bid"
        timestamp:
          type: string
          format: date-time
          description: "Updated timestamp of the bid"
    Auction:
      type: object
      properties:
        id:
          type: integer
          description: "Unique ID of the auction"
        gachaCollectionId:
          type: integer
          description: "ID of the associated gacha collection"
        auctionStart:
          type: string
          format: date-time
          description: "Start time of the auction"
        auctionEnd:
          type: string
          format: date-time
          description: "End time of the auction"
        minimumBid:
          type: number
          format: float
          description: "Minimum bid amount for the auction"
        timestamp:
          type: string
          format: date-time
          description: "Timestamp of the auction creation"
        status:
          type: string
          description: "Current status of the auction"
    CreateAuctionRequest:
      type: object
      properties:
        gachaCollectionId:
          type: integer
          description: "ID of the associated gacha collection"
        auctionStart:
          type: string
          format: date-time
          description: "Start time of the auction"
        auctionEnd:
          type: string
          format: date-time
          description: "End time of the auction"
        minimumBid:
          type: number
          format: float
          description: "Minimum bid amount for the auction"
        timestamp:
          type: string
          format: date-time
          description: "Timestamp of the auction creation"
        status:
          type: string
          description: "Status of the auction (e.g., 'open', 'closed')"
    UpdateAuctionRequest:
      type: object
      properties:
        gachaCollectionId:
          type: integer
          description: "ID of the associated gacha collection"
        auctionStart:
          type: string
          format: date-time
          description: "Start time of the auction"
        auctionEnd:
          type: string
          format: date-time
          description: "End time of the auction"
        minimumBid:
          type: number
          format: float
          description: "Minimum bid amount for the auction"
        timestamp:
          type: string
          format: date-time
          description: "Timestamp of the auction update"
        status:
          type: string
          description: "Updated status of the auction"
    GachaCollection:
      type: object
      properties:
        id:
          type: integer
          description: "Unique ID of the gacha collection"
        gachaId:
          type: integer
          description: "ID of the associated gacha"
        userId:
          type: integer
          description: "ID of the user owning the gacha collection"
        timestamp:
          type: string
          format: date-time
          description: "Timestamp of when the gacha collection was created"
        source:
          type: string
          description: "Source of the gacha collection"
    CreateGachaCollectionRequest:
      type: object
      properties:
        gachaId:
          type: integer
          description: "ID of the associated gacha"
        userId:
          type: integer
          description: "ID of the user owning the gacha collection"
        source:
          type: string
          description: "Source of the gacha collection"
    UpdateGachaCollectionRequest:
      type: object
      properties:
        gachaId:
          type: integer
          description: "ID of the associated gacha"
        userId:
          type: integer
          description: "ID of the user owning the gacha collection"
        source:
          type: string
          description: "Updated source of the gacha collection"
    Gacha:
      type: object
      properties:
        id:
          type: integer
          description: "Unique ID of the gacha"
        name:
          type: string
          description: "Name of the gacha"
        image:
          type: string
          description: "URL of the gacha's image"
        rarityPercent:
          type: number
          format: float
          description: "Rarity percentage of the gacha"
        description:
          type: string
          description: "Description of the gacha"
    CreateGachaRequest:
      type: object
      properties:
        name:
          type: string
          description: "Name of the gacha"
        image:
          type: string
          description: "URL of the gacha's image"
        rarityPercent:
          type: number
          format: float
          description: "Rarity percentage of the gacha"
        description:
          type: string
          description: "Description of the gacha"
    UpdateGachaRequest:
      type: object
      properties:
        name:
          type: string
          description: "Updated name of the gacha"
        image:
          type: string
          description: "Updated URL of the gacha's image"
        rarityPercent:
          type: number
          format: float
          description: "Updated rarity percentage of the gacha"
        description:
          type: string
          description: "Updated description of the gacha"
    CurrencyTransaction:
      type: object
      properties:
        id:
          type: integer
          description: "Unique ID of the transaction"
        userId:
          type: integer
          description: "ID of the user associated with the transaction"
        realAmount:
          type: number
          format: float
          description: "The real amount in currency"
        ingameAmount:
          type: number
          format: float
          description: "The ingame amount of currency"
        timestamp:
          type: string
          format: date-time
          description: "Timestamp of the transaction"
    CreateCurrencyTransactionRequest:
      type: object
      properties:
        userId:
          type: integer
          description: "ID of the user associated with the transaction"
        realAmount:
          type: number
          format: float
          description: "The real amount in currency"
        ingameAmount:
          type: number
          format: float
          description: "The ingame amount of currency"
        timestamp:
          type: string
          format: date-time
          description: "Timestamp of the transaction"
    AuctionTransaction:
      type: object
      properties:
        id:
          type: integer
          description: "Unique ID of the transaction"
        sellerId:
          type: integer
          description: "ID of the seller in the transaction"
        buyerId:
          type: integer
          description: "ID of the buyer in the transaction"
        auctionBidId:
          type: integer
          description: "ID of the auction bid associated with the transaction"
        timestamp:
          type: string
          format: date-time
          description: "Timestamp of the transaction"
    CreateAuctionTransactionRequest:
      type: object
      properties:
        sellerId:
          type: integer
          description: "ID of the seller in the transaction"
        buyerId:
          type: integer
          description: "ID of the buyer in the transaction"
        auctionBidId:
          type: integer
          description: "ID of the auction bid associated with the transaction"
        timestamp:
          type: string
          format: date-time
          description: "Timestamp of the transaction"
    UpdateAuctionTransactionRequest:
      type: object
      properties:
        sellerId:
          type: integer
          description: "ID of the seller in the transaction"
        buyerId:
          type: integer
          description: "ID of the buyer in the transaction"
        auctionBidId:
          type: integer
          description: "ID of the auction bid associated with the transaction"
        timestamp:
          type: string
          format: date-time
          description: "Timestamp of the transaction"
    User:
      type: object
      properties:
        id:
          type: integer
          description: "Unique ID of the user"
        authId:
          type: integer
          description: "Authentication ID of the user"
        profilePicture:
          type: string
          description: "URL of the user's profile picture"
        ingameCurrency:
          type: integer
          description: "Amount of in-game currency the user has"
        registrationDate:
          type: string
          format: date-time
          description: "Registration date of the user"
        status:
          type: string
          description: "Status of the user (e.g., ACTIVE, INACTIVE)"
    CreateUserRequest:
      type: object
      properties:
        authId:
          type: integer
          description: "Authentication ID of the user"
        profilePicture:
          type: string
          description: "URL of the user's profile picture"
        ingameCurrency:
          type: integer
          description: "Amount of in-game currency"
    UpdateUserRequest:
      type: object
      properties:
        ingameCurrency:
          type: integer
          description: "Updated in-game currency for the user"
        profilePicture:
          type: string
          description: "Updated profile picture URL"
        status:
          type: string
          description: "Updated status of the user"
    RegisterPlayerRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        profilePicture:
          type: string

    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string

    TokenResponse:
      type: object
      properties:
        access_token:
          type: string

    PlayerResponse:
      type: object
      properties:
        userId:
          type: integer

    PlayerInfoResponse:
      type: object
      properties:
        userId:
          type: integer
        profilePicture:
          type: string
        status:
          type: string
    Account:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        password:
          type: string
        salt:
          type: string
    AccountInput:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        salt:
          type: string
    Admin:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        password:
          type: string
        salt:
          type: string
    AdminInput:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        salt:
          type: string
    AuctionListResponse:
      type: object
      properties:
        market:
          type: array
          items:
            $ref: "#/components/schemas/AuctionA"
    AuctionResponse:
      type: object
      properties:
        auction:
          $ref: "#/components/schemas/AuctionA"
    AuctionCreateRequest:
      type: object
      properties:
        gachaCollectionId:
          type: integer
        userId:
          type: integer
        auctionStart:
          type: string
        auctionEnd:
          type: string
        minimumBid:
          type: number
        status:
          type: string
    AuctionHistoryResponse:
      type: object
      properties:
        auctions:
          type: array
          items:
            $ref: "#/components/schemas/AuctionA"
    AuctionUpdateRequest:
      type: object
      properties:
        gachaCollectionId:
          type: integer
        auctionStart:
          type: string
        auctionEnd:
          type: string
        status:
          type: string
    AuctionA:
      type: object
      properties:
        auctionId:
          type: integer
        gachaCollectionId:
          type: integer
        auctionStart:
          type: string
        auctionEnd:
          type: string
        status:
          type: string
    BidRequest:
      type: object
      properties:
        userId:
          type: integer
        bidAmount:
          type: number
    BidResponse:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        bidAmount:
          type: number
        auctionId:
          type: integer
        timestamp:
          type: string
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
    AuctionItem:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the auction.
        gachaCollectionId:
          type: integer
          description: Identifier for the associated Gacha collection.
        userId:
          type: integer
          description: Identifier for the user associated with the auction.
        auctionStart:
          type: string
          format: date-time
          description: Start date and time of the auction.
        auctionEnd:
          type: string
          format: date-time
          description: End date and time of the auction.
        minimumBid:
          type: number
          format: float
          description: Minimum bid amount required for the auction.
        timestamp:
          type: string
          format: date-time
          description: Timestamp for when the auction was created or updated.
        status:
          type: string
          description: Current status of the auction.
          enum:
            - ACTIVE
            - PASSED
            - UNKNOWN
security:
  - bearerAuth: []
