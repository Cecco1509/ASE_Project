services:
  apigateway:
    build:
      context: ./ApiGateway
      dockerfile: Dockerfile
    container_name: apigateway
    depends_on:
      - authmicroservice
      - auctionmicroservice
      - auctiondbmanager
      - userdbmanager
      - gachadbmanager
      - transactiondbmanager
      - paymentdbmanager
      - gachamicroservice
      - paymentsmicroservice
      - transactionsmicroservice
    ports:
      - "8080:5000"
    volumes:
      - ./config.json:/app/config.json
      - .:/ApiGateway
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - FLASK_APP=./ApiGateway/app.py
    secrets:
      - api_gateway_cert
      - api_gateway_cert_key

  auctionmicroservice:
    build:
      context: ./AuctionsMicroservice
      dockerfile: Dockerfile
    container_name: auctionmicroservice
    depends_on:
      - auctiondbmanager
    volumes:
      - ./config.json:/app/config.json
      - .:/AuctionsMicroservice
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - FLASK_APP=./AuctionsMicroservice/app.py
    secrets:
      - auction_ms_cert
      - auction_ms_key

  authmicroservice:
    build:
      context: ./AuthMicroservice
      dockerfile: Dockerfile
    container_name: authmicroservice
    depends_on:
      - authdatabase
    volumes:
      - ./config.json:/app/config.json
    secrets:
      - token_secret
      - auth_cert
      - auth_cert_key
      - db_password

  authdatabase:
    image: mcr.microsoft.com/mssql/server:2019-latest
    environment:
      - MSSQL_SA_PASSWORD_FILE=/run/secrets/db_password
      - ACCEPT_EULA=Y
      - MSSQL_TLS_CERT=/run/secrets/auth_db_cert
      - MSSQL_TLS_KEY=/run/secrets/auth_db_key
      - MSSQL_TLS_PROTOCOLS=1.2
      - MSSQL_FORCE_ENCRYPTION=1
    container_name: authdatabase
    secrets:
      - db_password
      - auth_db_cert
      - auth_db_key

  gachadatabase:
    image: mcr.microsoft.com/mssql/server:2019-latest
    environment:
      - MSSQL_SA_PASSWORD_FILE=/run/secrets/db_password
      - ACCEPT_EULA=Y
      - MSSQL_TLS_CERT=/run/secrets/gacha_db_cert
      - MSSQL_TLS_KEY=/run/secrets/gacha_db_key
      - MSSQL_TLS_PROTOCOLS=1.2
      - MSSQL_FORCE_ENCRYPTION=1
    container_name: gachadatabase
    secrets:
      - db_password
      - gacha_db_cert
      - gacha_db_key

  userdatabase:
    image: mcr.microsoft.com/mssql/server:2019-latest
    environment:
      - MSSQL_SA_PASSWORD_FILE=/run/secrets/db_password
      - ACCEPT_EULA=Y
      - MSSQL_TLS_CERT=/run/secrets/user_db_cert
      - MSSQL_TLS_KEY=/run/secrets/user_db_key
      - MSSQL_TLS_PROTOCOLS=1.2
      - MSSQL_FORCE_ENCRYPTION=1
    container_name: userdatabase
    secrets:
      - db_password
      - user_db_cert
      - user_db_key

  auctiondatabase:
    image: mcr.microsoft.com/mssql/server:2019-latest
    environment:
      - MSSQL_SA_PASSWORD_FILE=/run/secrets/db_password
      - ACCEPT_EULA=Y
      - MSSQL_TLS_CERT=/run/secrets/auction_db_cert
      - MSSQL_TLS_KEY=/run/secrets/auction_db_key
      - MSSQL_TLS_PROTOCOLS=1.2
      - MSSQL_FORCE_ENCRYPTION=1
    container_name: auctiondatabase
    secrets:
      - db_password
      - auction_db_cert
      - auction_db_key

  gachamicroservice:
    build:
      context: ./GachaMicroservice
      dockerfile: Dockerfile
    container_name: gachamicroservice
    volumes:
      - ./config.json:/app/config.json
      - .:/GachaMicroservice
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - FLASK_APP=./GachaMicroservice/app.py
    depends_on:
      - gachadbmanager
    secrets:
      - gacha_ms_cert
      - gacha_ms_cert_key

  paymentsmicroservice:
    build:
      context: ./PaymentsMicroservice
      dockerfile: Dockerfile
    container_name: paymentsmicroservice
    volumes:
      - ./config.json:/app/config.json
    secrets:
      - payments_cert
      - payments_cert_key

  transactionsmicroservice:
    build:
      context: ./TransactionsMicroservice
      dockerfile: Dockerfile
    container_name: transactionsmicroservice
    volumes:
      - ./config.json:/app/config.json # Mounts config.json into the container
    secrets:
      - transactions_ms_cert
      - transactions_ms_key

  usersmicroservice:
    build:
      context: ./UsersMicroservice
      dockerfile: Dockerfile
    container_name: usersmicroservice
    volumes:
      - ./config.json:/app/config.json # Mounts config.json into the container
    secrets:
      - users_cert
      - users_cert_key

  paymentdatabase:
    image: mcr.microsoft.com/mssql/server:2019-latest
    environment:
      - MSSQL_SA_PASSWORD_FILE=/run/secrets/db_password
      - ACCEPT_EULA=Y
      - MSSQL_TLS_CERT=/run/secrets/payment_db_cert
      - MSSQL_TLS_KEY=/run/secrets/payment_db_key
      - MSSQL_TLS_PROTOCOLS=1.2
      - MSSQL_FORCE_ENCRYPTION=1
    container_name: paymentdatabase
    secrets:
      - db_password
      - payment_db_cert
      - payment_db_key

  transactiondatabase:
    image: mcr.microsoft.com/mssql/server:2019-latest
    environment:
      - MSSQL_SA_PASSWORD_FILE=/run/secrets/db_password
      - ACCEPT_EULA=Y
      - MSSQL_TLS_CERT=/run/secrets/transaction_db_cert
      - MSSQL_TLS_KEY=/run/secrets/transaction_db_key
      - MSSQL_TLS_PROTOCOLS=1.2
      - MSSQL_FORCE_ENCRYPTION=1
    container_name: transactiondatabase
    secrets:
      - db_password
      - transaction_db_cert
      - transaction_db_key

  auctiondbmanager:
    build:
      context: ./AuctionDBManager
      dockerfile: Dockerfile
    container_name: auctiondbmanager
    depends_on:
      - auctiondatabase
    volumes:
      - ./config.json:/app/config.json
    secrets:
      - db_password
      - auction_db_manager_cert
      - auction_db_manager_key

  gachadbmanager:
    build:
      context: ./GachaDBManager
      dockerfile: Dockerfile
    container_name: gachadbmanager
    depends_on:
      - gachadatabase
    volumes:
      - ./config.json:/app/config.json
    secrets:
      - db_password
      - gacha_db_manager_cert
      - gacha_db_manager_key

  paymentdbmanager:
    build:
      context: ./PaymentDBManager
      dockerfile: Dockerfile
    container_name: paymentdbmanager
    depends_on:
      - paymentdatabase
    volumes:
      - ./config.json:/app/config.json
    secrets:
      - db_password
      - payment_db_manager_cert
      - payment_db_manager_key

  transactiondbmanager:
    build:
      context: ./TransactionDBManager
      dockerfile: Dockerfile
    container_name: transactiondbmanager
    depends_on:
      - transactiondatabase
    volumes:
      - ./config.json:/app/config.json
    secrets:
      - db_password
      - transaction_db_manager_cert
      - transaction_db_manager_key

  userdbmanager:
    build:
      context: ./UserDBManager
      dockerfile: Dockerfile
    container_name: userdbmanager
    depends_on:
      - userdatabase
    volumes:
      - ./config.json:/app/config.json
    secrets:
      - db_password
      - user_db_manager_cert
      - user_db_manager_key

  rabbit:
    hostname: rabbit
    image: "rabbitmq:3-management"
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=mypass
    ports:
      - "15672:15672"
      - "5672:5672"

  auction_worker:
    build:
      context: ./AuctionWorker
      dockerfile: dockerfile
    user: nobody
    depends_on:
      - rabbit
    volumes:
      - ./config.json:/app/config.json
      - ./AuctionWorker:/AuctionWorker

  auctioneer:
    build:
      context: ./Auctioneer
      dockerfile: dockerfile
    container_name: auctioneer
    # depends_on:
    #   - auctiondbmanager
    volumes:
      - ./config.json:/app/config.json

secrets:
  token_secret:
    file: ./secrets/token_secret.env
  users_cert:
    file: ./secrets/users_cert.pem
  users_cert_key:
    file: ./secrets/users_key.pem
  auth_cert:
    file: ./secrets/auth_cert.pem
  auth_cert_key:
    file: ./secrets/auth_key.pem
  db_password:
    file: ./secrets/db_password.txt
  auth_db_cert:
    file: ./secrets/auth_db_cert.pem
  auth_db_key:
    file: ./secrets/auth_db_key.pem
  user_db_cert:
    file: ./secrets/user_db_cert.pem
  user_db_key:
    file: ./secrets/user_db_key.pem
  gacha_db_cert:
    file: ./secrets/gacha_db_cert.pem
  gacha_db_key:
    file: ./secrets/gacha_db_key.pem
  payment_db_cert:
    file: ./secrets/payment_db_cert.pem
  payment_db_key:
    file: ./secrets/payment_db_key.pem
  auction_db_cert:
    file: ./secrets/auction_db_cert.pem
  auction_db_key:
    file: ./secrets/auction_db_key.pem
  transaction_db_cert:
    file: ./secrets/transaction_db_cert.pem
  transaction_db_key:
    file: ./secrets/transaction_db_key.pem
  auction_db_manager_cert:
    file: ./secrets/auction_db_manager_cert.pem
  auction_db_manager_key:
    file: ./secrets/auction_db_manager_key.pem
  gacha_db_manager_cert:
    file: ./secrets/gacha_db_manager_cert.pem
  gacha_db_manager_key:
    file: ./secrets/gacha_db_manager_key.pem
  payment_db_manager_cert:
    file: ./secrets/payment_db_manager_cert.pem
  payment_db_manager_key:
    file: ./secrets/payment_db_manager_key.pem
  transaction_db_manager_cert:
    file: ./secrets/transaction_db_manager_cert.pem
  transaction_db_manager_key:
    file: ./secrets/transaction_db_manager_key.pem
  user_db_manager_cert:
    file: ./secrets/user_db_manager_cert.pem
  user_db_manager_key:
    file: ./secrets/user_db_manager_key.pem
  api_gateway_cert:
    file: ./secrets/api_gateway_cert.pem
  api_gateway_cert_key:
    file: ./secrets/api_gateway_key.pem
  payments_cert:
    file: ./secrets/payments_cert.pem
  payments_cert_key:
    file: ./secrets/payments_key.pem
  gacha_ms_cert:
    file: ./secrets/gacha_ms_cert.pem
  gacha_ms_cert_key:
    file: ./secrets/gacha_ms_key.pem
  auction_ms_cert:
    file: ./secrets/auction_ms_cert.pem
  auction_ms_key:
    file: ./secrets/auction_ms_key.pem
  transactions_ms_cert:
    file: ./secrets/transactions_ms_cert.pem
  transactions_ms_key:
    file: ./secrets/transactions_ms_key.pem

volumes:
  uservolume:
    driver: local
  gachavolume:
    driver: local
  auctionsvolume:
    driver: local
  transactionsvolume:
    driver: local
